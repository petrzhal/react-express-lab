{"ast":null,"code":"var _jsxFileName = \"G:\\\\strweb4\\\\lab4\\\\client\\\\src\\\\components\\\\AirQuality.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherForecastComponent = () => {\n  _s();\n  const [forecastData, setForecastData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const API_URL = \"https://api.weatherbit.io/v2.0/forecast/minutely\"; // Используем HTTPS\n  const API_KEY = \"4e0273fd3ff7488493555a3205511908\"; // Ваш API ключ\n  const LATITUDE = \"35.7721\"; // Широта\n  const LONGITUDE = \"-78.63861\"; // Долгота\n  const UNITS = \"M\"; // Опционально, можно использовать \"I\" для Имперских единиц\n\n  useEffect(() => {\n    const fetchForecastData = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`${API_URL}?lat=${LATITUDE}&lon=${LONGITUDE}&key=${API_KEY}&units=${UNITS}`);\n\n        // Проверка на успешный ответ\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const data = await response.json();\n        console.log(\"API response:\", data); // Логирование ответа\n        setForecastData(data);\n      } catch (err) {\n        console.error(\"API response error:\", err); // Логирование ошибки\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchForecastData();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Minutely Weather Forecast for \", forecastData.city_name, \", \", forecastData.state_code]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), forecastData && forecastData.data && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: forecastData.data.map((minuteData, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 18\n          }, this), \" \", minuteData.timestamp_local]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Precipitation:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 18\n          }, this), \" \", minuteData.precip, \" mm/hr\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Snow:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 18\n          }, this), \" \", minuteData.snow, \" mm/hr\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherForecastComponent, \"m3w9swgL2HevcieK9KkC9E7JEb8=\");\n_c = WeatherForecastComponent;\nexport default WeatherForecastComponent;\nvar _c;\n$RefreshReg$(_c, \"WeatherForecastComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","WeatherForecastComponent","_s","forecastData","setForecastData","loading","setLoading","error","setError","API_URL","API_KEY","LATITUDE","LONGITUDE","UNITS","fetchForecastData","response","fetch","ok","Error","status","data","json","console","log","err","message","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","city_name","state_code","map","minuteData","index","timestamp_local","precip","snow","_c","$RefreshReg$"],"sources":["G:/strweb4/lab4/client/src/components/AirQuality.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst WeatherForecastComponent = () => {\r\n  const [forecastData, setForecastData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const API_URL = \"https://api.weatherbit.io/v2.0/forecast/minutely\"; // Используем HTTPS\r\n  const API_KEY = \"4e0273fd3ff7488493555a3205511908\"; // Ваш API ключ\r\n  const LATITUDE = \"35.7721\"; // Широта\r\n  const LONGITUDE = \"-78.63861\"; // Долгота\r\n  const UNITS = \"M\"; // Опционально, можно использовать \"I\" для Имперских единиц\r\n\r\n  useEffect(() => {\r\n    const fetchForecastData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await fetch(`${API_URL}?lat=${LATITUDE}&lon=${LONGITUDE}&key=${API_KEY}&units=${UNITS}`);\r\n        \r\n        // Проверка на успешный ответ\r\n        if (!response.ok) {\r\n          throw new Error(`HTTP error! Status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        console.log(\"API response:\", data); // Логирование ответа\r\n        setForecastData(data);\r\n      } catch (err) {\r\n        console.error(\"API response error:\", err); // Логирование ошибки\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchForecastData();\r\n  }, []);\r\n\r\n  if (loading) return <div>Loading...</div>;\r\n  if (error) return <div>Error: {error}</div>;\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h2>Minutely Weather Forecast for {forecastData.city_name}, {forecastData.state_code}</h2>\r\n      {forecastData && forecastData.data && (\r\n        <ul>\r\n          {forecastData.data.map((minuteData, index) => (\r\n            <li key={index}>\r\n              <p><strong>Time:</strong> {minuteData.timestamp_local}</p>\r\n              <p><strong>Precipitation:</strong> {minuteData.precip} mm/hr</p>\r\n              <p><strong>Snow:</strong> {minuteData.snow} mm/hr</p>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecastComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}